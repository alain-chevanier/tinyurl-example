#+TITLE: TinyURL
#+AUTHOR: Alain Chevanier

* Overview
A minimal Spring Boot (3.5.x) REST API in Java 17 showcasing:
- A Hello World controller to showcase basic endpoints returning plain text and JSON
- A tinyURL skeleton with endpoints to create a short URL and follow a short code

This repository uses the Maven Wrapper (mvnw), so you do not need a global Maven installation.

* Requirements
- Java 17 (JDK)

* Build
#+begin_src sh
./mvnw clean verify
#+end_src

* Run (dev)
#+begin_src sh
./mvnw spring-boot:run
#+end_src

* Package and run JAR
#+begin_src sh
./mvnw -DskipTests package
java -jar target/restfultapi-0.0.1-SNAPSHOT.jar
#+end_src

* Tests
- All tests:
#+begin_src sh
./mvnw test
#+end_src

- Single test class:
#+begin_src sh
./mvnw -Dtest=TinyURLControllerTest test
#+end_src

- Single test method (example):
#+begin_src sh
./mvnw -Dtest=HelloWorldControllerTest#shouldReturnHelloWorldWhenCallingRootEndpoint test
#+end_src

* Auto-format Java code before committing (Git hook)
If you want code to be auto-formatted on every commit, you can use the git code format Maven plugin without changing the POM by invoking it directly.

- Install the pre-commit hook (formats staged Java files automatically):
#+begin_src sh
./mvnw com.cosium.code:git-code-format-maven-plugin:install-hooks
#+end_src

- Format the whole project once (optional):
#+begin_src sh
./mvnw com.cosium.code:git-code-format-maven-plugin:format
#+end_src

- Validate formatting (useful in CI or locally):
#+begin_src sh
./mvnw com.cosium.code:git-code-format-maven-plugin:validate
#+end_src


* Endpoints
** HelloWorld
- ~GET /~
  - Returns: plain text "Hello, World!"
- ~GET /random~
  - Returns: application/json with a random message
- ~GET /this/is/a/pretty/long/path/that/we/might/want/to/shorten~
  - Returns: a json with ~{"message":"This is a pretty long path that we might want to shorten"}~

** TinyURL
These endpoints match the current `TinyURLController` and return mocked/hardcoded responses. The real logic is intentionally not implemented.

- ~POST /tinyurl~
  - Description: Create a short URL from a long URL
  - Request Content-Type: application/json
  - Request body:
    #+begin_example
    {
      "url": "http://localhost:8080/some/very/long/url"
    }
    #+end_example
  - Response: 201 Created
  - Response Content-Type: application/json
  - Response body:
    #+begin_example
    {
      "shortUrl": "http://localhost:8080/tinyurl/9n80"
    }
    #+end_example

- ~GET /tinyurl/{shortCode}~
  - Description: Redirects a short code to the original long URL
  - Path variable: shortCode (string)
  - Response: 302 Found
  - Headers: ~Location: http://localhost:8080/some/very/long/url~

* Hit the endpoints
** Run the server locally
You can try the endpoints locally after starting the app:
#+begin_src sh
./mvnw spring-boot:run
#+end_src

Notes:
- When not specified, the server runs on port 8080
- The base URL is ~http://localhost:8080~

Use curl, it's usually available on Linux and MacOS. On Windows, you can use PowerShell or WSL.

Notes:
- You can use tools like Postman or Insomnia if you prefer a GUI over curl
- In the examples below, ~-i~ is used to include HTTP response headers in the output
- When not specified, curl uses GET as the default HTTP method
- For POST requests with a JSON body, ~-H "Content-Type: application/json"~ is used to set the correct content type and ~-d~ is used to provide the JSON data

** HelloWorld
- Call the root endpoint:
  #+begin_src sh
  curl -i "http://localhost:8080/"
  #+end_src

- Call the random message endpoint:
  #+begin_src sh
  curl -i "http://localhost:8080/random"
  #+end_src

- Call the long path endpoint:
  #+begin_src sh
  curl -i "http://localhost:8080/this/is/a/pretty/long/path/that/we/might/want/to/shorten"
  #+end_src

** TinyURL

- Create a short URL (returns 201 and a JSON with shortUrl):
#+begin_src sh
curl -i -X POST "http://localhost:8080/tinyurl" \
  -H "Content-Type: application/json" \
  -d '{"url":"http://localhost:8080/this/is/a/pretty/long/path/that/we/might/want/to/shorten"}'
#+end_src

- Retrieve the original URL (see 302 and Location header):
#+begin_src sh
curl -i "http://localhost:8080/tinyurl/9n80"
#+end_src

- Follow the redirect automatically (-L):
#+begin_src sh
curl -i -L "http://localhost:8080/tinyurl/9n80"
#+end_src
